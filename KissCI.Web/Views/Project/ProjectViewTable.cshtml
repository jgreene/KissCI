@model Tuple<string, IEnumerable<KissCI.Internal.Domain.ProjectView>>


<table class="project-view-table table table-striped table-bordered" data-category="@Model.Item1">
    <thead>
        <tr>
            <th></th>
            <th>Project Name</th>
            <th>Last Build Status</th>
            <th>Last Build Time</th>
            <th>Next Build Time</th>
            <th>Status</th>
            <th>Activity</th>
            <th>Messages</th>
        </tr>

    </thead>
    <tbody>
    @{ var showForce = new Func<KissCI.Internal.Domain.ProjectView, bool>((project) => {
           return project.Info.Status != KissCI.Internal.Domain.Status.Stopped
               && project.Info.Activity == KissCI.Internal.Domain.Activity.Sleeping;
           
       });
    }

    @{ var showCancel = new Func<KissCI.Internal.Domain.ProjectView, bool>((project) =>
       {
           return project.Info.Status == KissCI.Internal.Domain.Status.Running
               && project.Info.Activity == KissCI.Internal.Domain.Activity.Building;
       });
    }

    @{ var showStop = new Func<KissCI.Internal.Domain.ProjectView, bool>((project) =>
       {
           return project.Info.Status == KissCI.Internal.Domain.Status.Running
               && project.Info.Activity == KissCI.Internal.Domain.Activity.Sleeping;
       });
    }

    @foreach(var project in this.Model.Item2){
        <tr data-project-name="@project.Info.ProjectName">
            <td>
                @if(showForce(project)){
                    <a class="force-button" href="#">Force</a><br />
                }

                @if (showCancel(project)){
                    <a class="cancel-button" href="#">Cancel</a><br />
                }

                @if(showStop(project)){
                    <a class="stop-button" href="#">Stop</a>
                }else if(project.Info.Status == KissCI.Internal.Domain.Status.Stopped){
                    <a class="start-button" href="#">Start</a>
                }
                
            </td>
            <td>@Html.ActionLink(project.Info.ProjectName, "Builds", new { projectName = project.Info.ProjectName })</td>
            @if (project.LastBuild != null)
            {
                if (project.LastBuild.BuildResult.HasValue)
                {
                    if(project.LastBuild.BuildResult.Value == KissCI.Internal.Domain.BuildResult.Success){
                    <td class="text-success">@project.LastBuild.BuildResult.ToString()</td>
                    }else if(project.LastBuild.BuildResult.Value == KissCI.Internal.Domain.BuildResult.Failure){
                    <td class="text-error">@project.LastBuild.BuildResult.ToString()</td>
                    }
                    else if (project.LastBuild.BuildResult.Value == KissCI.Internal.Domain.BuildResult.Cancelled)
                    {
                    <td class="text-warning">@project.LastBuild.BuildResult.ToString()</td>
                    }
                }else{
                    <td></td>
                }
                
                <td>@Html.ActionLink(project.LastBuild.BuildTime.ToString(), "Log", new{ id = project.LastBuild.Id })</td>
            }
            else
            {
                <td></td>
                <td></td>
            }
            <td>@Html.Encode(project.NextBuildTime.HasValue ? project.NextBuildTime.Value.ToString() : "")</td>
            <td>@project.Info.Status.ToString()</td>
            <td>@project.Info.Activity.ToString()</td>
            <td>@Html.Encode(project.LastMessage == null ? "" : project.LastMessage.Message)</td>
            
        </tr>
    }
    </tbody>
</table>