@using System;
@using System.Collections.Generic;
@using System.Linq;

@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<KissCI.Web.Models.Project.ProjectListView>


<div class="table-responsive project-view-table-container">
    <table class="project-view-table table table-striped" data-category="@Model.CategoryName">
        <thead>
            <tr>
                <th></th>
                <th>Project Name</th>
                <th>Last Build Status</th>
                <th>Last Build Time</th>
                <th>Next Build Time</th>
                <th>Status</th>
                <th>Activity</th>
                <th>Messages</th>
            </tr>
        </thead>
        <tbody>
            @{ var showCommands = new Func<global::KissCI.Internal.Domain.ProjectView, bool>((project) =>
         {
             return project.Info.Status != KissCI.Internal.Domain.Status.Stopped
                 && project.Info.Activity == KissCI.Internal.Domain.Activity.Sleeping;

         });
            }

            @{ var showCancel = new Func<global::KissCI.Internal.Domain.ProjectView, bool>((project) =>
       {
           return project.Info.Status == KissCI.Internal.Domain.Status.Running
               && project.Info.Activity == KissCI.Internal.Domain.Activity.Building;
       });
            }

            @{ var showStop = new Func<global::KissCI.Internal.Domain.ProjectView, bool>((project) =>
       {
           return project.Info.Status == KissCI.Internal.Domain.Status.Running
               && project.Info.Activity == KissCI.Internal.Domain.Activity.Sleeping;
       });
            }

            @foreach (var project in this.Model.ProjectViews)
            {
                <tr class="project-row" data-project-name="@project.Info.ProjectName">
                    <td>
                        @if (showCommands(project))
                        {
                            foreach (var command in project.Commands)
                            {
                                <a class="command-button" href="#" data-command-name="@command">@command</a><br />
                            }
                        }

                        @if (showCancel(project))
                        {
                            <a class="cancel-button" href="#">cancel</a><br />
                        }

                        @if (showStop(project))
                        {
                            <a class="stop-button" href="#">stop</a>
                        }
                        else if (project.Info.Status == KissCI.Internal.Domain.Status.Stopped)
                        {
                            <a class="start-button" href="#">start</a>
                        }

                    </td>
                    <td><a href="@Url.Content("/project/" + project.Info.ProjectName + "/builds")">@project.Info.ProjectName</a></td>
                    @if (project.LastBuild != null)
                    {
                        if (project.LastBuild.BuildResult.HasValue)
                        {
                            if (project.LastBuild.BuildResult.Value == KissCI.Internal.Domain.BuildResult.Success)
                            {
                                <td class="text-success">@project.LastBuild.BuildResult.ToString()</td>
                            }
                            else if (project.LastBuild.BuildResult.Value == KissCI.Internal.Domain.BuildResult.Failure)
                            {
                                <td class="text-danger">@project.LastBuild.BuildResult.ToString()</td>
                            }
                            else if (project.LastBuild.BuildResult.Value == KissCI.Internal.Domain.BuildResult.Cancelled)
                            {
                                <td class="text-warning">@project.LastBuild.BuildResult.ToString()</td>
                            }
                        }
                        else
                        {
                            <td></td>
                        }

                        <td><a href="@Url.Content("/project/" + project.Info.ProjectName + "/log/" + project.LastBuild.Id.ToString())">@project.LastBuild.BuildTime.ToString()</a></td>
                    }
                    else
                    {
                        <td></td>
                        <td></td>
                    }
                    <td>@(project.NextBuildTime.HasValue ? project.NextBuildTime.Value.ToString() : "")</td>
                    <td>@project.Info.Status.ToString()</td>
                    <td>@project.Info.Activity.ToString()</td>
                    <td>@(project.LastMessage == null ? "" : string.Join("", project.LastMessage.Message.Take(300).ToArray()))</td>

                </tr>
            }
        </tbody>
    </table>
</div>